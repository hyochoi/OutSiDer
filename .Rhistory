return(mean(PO2std[PO1out]))
} else {
# Direction 2 is a main signal
return(0)
}
} else {
# Direction 1 is a main signal
return(0)
}
}
get_POscore = function(X,u) {
# X: d by n data matrix
# u: d by 1 vector
u = u/sqrt(sum(u^2))
score = t(X)%*%u
std.score = (score - median(score))/mad(score)
return(list(score=score,std.score=std.score))
}
get_unitdir = function(u) {
if (sum(u^2)>1e-10) {
u/sqrt(sum(u^2))
} else {
u
}
}
get_stdvar = function(x,robust=T) {
if (mad(x)>1e-10) {
(x-median(x))/mad(x)
} else {
rep(0,length(x))
}
}
rm_onedim = function(X,u) {
# X = d by n data
# u = d by 1 vector
u = get_unitdir(u)
pscore = t(u)%*%X
return(list(appr.X = u%*%pscore,resd.X = (X - u%*%pscore), pscore = as.vector(pscore)))
}
rm_subspace = function(X,basis) {
# X = d by n data
# basis = d by K basis or d by 1 vector
if (is.null(dim(basis))) {
K = 1
return(rm_onedim(X=X,u=basis)$resd.X)
} else {
K = dim(basis)[2]
for (k in 1:K) {
X = rm_onedim(X=X,u=basis[,k])$resd.X
}
return(X)
}
}
KDEscatter = function(X,high=0.7,low=0.3,indlist=NULL,
plot.diag="upper",
colmat=NULL,ylim.list=NULL,
print.corr=TRUE, ...) {
n = dim(X)[1]
m = dim(X)[2]
par(mfrow=c(m,m),mar=c(1.5,1.5,1.5,1.5))
for (i in 1:m) {
for (j in i:m) {
if (i==j) {
par(mfg=c(i,j))
kdeplot.hy(X[,i],high=0.6,low=0.2,indlist=indlist,
colmat=colmat,xlim=ylim.list[[i]],...)
title(main=colnames(X)[i])
} else {
if ((plot.diag=="both") | (plot.diag=="upper")) {
par(mfg=c(i,j))
plot.hy(x=X[,j],y=X[,i],indlist=indlist,
colmat=colmat,
xlim=ylim.list[[j]],ylim=ylim.list[[i]],...)
if (print.corr) {
legend("topleft",bty="n",
legend=paste("corr =",round(cor(X[,j],X[,i]),digits=3)))
}
}
if ((plot.diag=="both") | (plot.diag=="lower")) {
par(mfg=c(j,i))
plot.hy(x=X[,i],y=X[,j],indlist=indlist,
colmat=colmat,
xlim=ylim.list[[i]],ylim=ylim.list[[j]],...)
}
# par(mfg=c(i,j))
# plot.hy(x=X[,i],y=X[,j],colmat=colmat,pch=19)
}
}
}
}
KDEscatter.here = function(X,high=0.7,low=0.3,indlist=NULL,cutoff=5,pointcol="red",
plot.diag="upper",
colmat=NULL,ylim.list=NULL,
print.corr=TRUE, ...) {
n = dim(X)[1]
m = dim(X)[2]
colmat.base = rep("grey",n)
par(mfrow=c(m,m),mar=c(1.5,1.5,1.5,1.5))
for (i in 1:m) {
for (j in i:m) {
if (i==j) {
par(mfg=c(i,j))
kdeplot.hy(X[,i],high=0.6,low=0.2,indlist=indlist,
colmat=colmat,xlim=ylim.list[[i]],...)
title(main=colnames(X)[i])
} else {
if ((plot.diag=="both") | (plot.diag=="upper")) {
par(mfg=c(i,j))
commonout = which(apply(abs(X[,c(j,i)]),1,FUN=function(x){length(which(x>cutoff))})>1)
colmat2 = colmat.base
colmat2[commonout] = pointcol
plot.hy(x=X[,j],y=X[,i],indlist=commonout,
colmat=colmat2,
xlim=ylim.list[[j]],ylim=ylim.list[[i]],...)
if (print.corr) {
legend("topleft",bty="n",
legend=paste("corr =",round(cor(X[,j],X[,i]),digits=3)))
}
}
if ((plot.diag=="both") | (plot.diag=="lower")) {
par(mfg=c(j,i))
commonout = which(apply(abs(X[,c(j,i)]),1,FUN=function(x){length(which(x>cutoff))})>1)
colmat2 = colmat.base
colmat2[commonout] = pointcol
plot.hy(x=X[,i],y=X[,j],indlist=commonout,
colmat=colmat2,
xlim=ylim.list[[i]],ylim=ylim.list[[j]],...)
}
# par(mfg=c(i,j))
# plot.hy(x=X[,i],y=X[,j],colmat=colmat,pch=19)
}
}
}
}
get_PO = function(X,siglev=1e-4,NormCutoff=3,canDir=NULL,numSearch=300) {
if (is.null(X)) {
stop("object is null")
}
if (is.null(dim(X))) { # X is a vector
n = length(X)
ADstat = ADstatWins.hy(X);
if (ADstat < NormCutoff) {
OS = abs(X-median(X))/mad(X)
OSpval = 1-pchisq(q=OS^2,df=1)
cutoff = qchisq(p=(1-siglev),df=1)
NPS = matrix(rep(OS,n),ncol=n)
directions = matrix(rep(X,n),ncol=n)
} else {
message("no direction satisfied the constraint")
OS = rep(0,n)
OSpval = rep(1,n)
cutoff = 0
NPS = directions = NULL
}
} else { # X is a matrix
if (is.null(canDir)) {
n = ncol(X); M = nrow(X);
Scov = (X%*%t(X))/n
d = length(which(eigen(Scov)$values>1e-13))
x = t(X)
ndir = numSearch*M
A = generdir(x,ndir=ndir) # generates `ndir' directions (ndir by M)
## Add more potential directions
if (M == d) {
B0 = solve(Scov)%*%X   # M by n
B0 = B0[,-which(apply(B0,2,FUN=function(x){sqrt(sum(x^2))})<1e-10)]
B1 = sweep(B0,2,apply(B0,2,FUN=function(x){sqrt(sum(x^2))}),"/")  # normalized M by n
A = rbind(A,t(B1))  # ndir by M
}
A = rbind(A,diag(M))
## Compute projection outlyingness
Y = x %*% t(A) # project x onto A (n by ndir)
ADstat = apply(Y,2,ADstatWins.hy) #
indir = which(ADstat<NormCutoff)
if (length(indir)>1) {
A = A[indir,]; Y = Y[,indir]
out_temp = apply(X=Y,MARGIN=2,
FUN= function(t) (t-median(t))/mad(t)) # n by length(indir)
indexmax = apply(abs(out_temp),1,which.max)
NPS = out_temp[,indexmax]
directions=t(A[indexmax,])
neg.index = which(diag(NPS)<0)
if (length(neg.index)>0) {
NPS[,neg.index] = -NPS[,neg.index];
directions[,neg.index] = -directions[,neg.index];
}
OS=diag(NPS)
OSpval = 1-pchisq(q=OS^2,df=d);
cutoff = qchisq(p=(1-siglev),df=d);
} else {
message("no direction satisfied the constraint")
OS = rep(0,n)
OSpval = rep(1,n)
cutoff = 0
NPS = directions = NULL
}
}
} # end of if (is.null(dim(X)))
if (sum(OS)<1e-5) {
out = NULL; out.sort = NULL
} else {
out = which(OSpval<siglev)
out.sort = out[order(OS[out],decreasing=TRUE)]
}
return(list(OS=OS,OSpval=OSpval,NPS=NPS,directions=directions,cutoff=cutoff,
outliers=out,outliers.sort=out.sort))
}
plot.hy = function(x,y,indlist=NULL,text=F,
colmat=NULL,indcol="red",
cex=1,indcex=1.2,xlim=NULL,ylim=NULL,
xlab=NULL,ylab=NULL,xylab.cex=1.5,...) {
n=length(x)
if (length(indlist)==0) {indlist=NULL}
if (is.null(xlim)) {
xlim=yaxis.hy(x)
}
if (is.null(ylim)) {
ylim=yaxis.hy(y)
}
if (is.null(indlist)) {
if (is.null(colmat)) {
colmat=rep("black",length(x))
}
plot(x=x,y=y,col=colmat,xlim=xlim,ylim=ylim,axes=F,ylab=NA,xlab=NA,cex=cex,...)
box()
abline(0, 0, lty = 2, col = rgb(0.5, 0.5, 0.5))
abline(v = 0, lty = 2, col = rgb(0.5, 0.5, 0.5))
axis(side = 1, tck = -0.015, labels = NA)
axis(side = 1, lwd = 0, line = -1, cex = 0.2, cex.axis = 0.9)
axis(side = 2, tck = -0.015, lwd = 0, line = -1, cex.axis = 0.9)
mtext(side = 1, xlab, line = 1.5, cex = xylab.cex)
mtext(side = 2, ylab, line = 1, cex = xylab.cex)
} else {
if (is.null(colmat)) {
colmat=rep("grey",n)
colmat[indlist]=rep(indcol,length(indlist))
}
plot(x[-indlist],y=y[-indlist],col=colmat[-indlist],cex=cex,
xlim=xlim,ylim=ylim,
axes=F,ylab=NA,xlab=NA,...)
box()
abline(0, 0, lty = 2, col = rgb(0.5, 0.5, 0.5))
abline(v = 0, lty = 2, col = rgb(0.5, 0.5, 0.5))
axis(side = 1, tck = -0.015, labels = NA)
axis(side = 1, lwd = 0, line = -1, cex = 0.2, cex.axis = 0.9)
axis(side = 2, tck = -0.015, lwd = 0, line = -1, cex.axis = 0.9)
mtext(side = 1, xlab, line = 1.5, cex = xylab.cex)
mtext(side = 2, ylab, line = 1, cex = xylab.cex)
if (!text) {
points(x[indlist],y[indlist],col=colmat[indlist],cex=indcex,...)
} else {
text(x[indlist],y[indlist],indlist,col=colmat[indlist],cex=indcex,...)
}
}
}
load("./HighDimOutlier/data/TP53_part_intron_pileup.RData")
Ranges = get_Ranges(Gene=GeneName,regions=regions)
par(mfrow=c(3,3),mar=c(3,3,3,3))
set.seed(0)
ScissorOutput = Scissor(pileupData=GeneDataT,Ranges=Ranges,logshiftVal=10,plotNormalization=F)
# logData = ScissorOutput$logData
# ScissorOutput$globalSC
# ScissorOutput$localSC
n = ncol(GeneDataT)
d = nrow(GeneDataT)
outliers = ScissorOutput$SC
nonoutliers = which(!c(1:n) %in% outliers)
palette_SCISSOR()
out_plot=c(69,164)
# out_plot=c(216,145)
colmat.base = rep("darkgrey",n)
colmat.base[out_plot] = c(1,2)
logData0 = ScissorOutput$logData
logData = logData0 - apply(logData0,1,median)
z.pca = pca.hy(data=logData,subt.mean=FALSE)
set.seed(0)
X = z.pca$projmat[2:9,]
PCdir = z.pca$dirmat[,2:9]
ndir = ncol(PCdir)
z.pca$eigenval[1:20]
PO_res = get_PO(X=X,numSearch=5000)
cutoff = sqrt(qchisq(p=(1-1e-04),df=ndir))
outliers = PO_res$outliers.sort
length(outliers)
ldMOD = PO_res$directions
MOD = PCdir %*% ldMOD
colnames(MOD) = 1:ncol(MOD)
colnames(ldMOD) = 1:ncol(ldMOD)
par(mfrow=c(5,4))
j = 164
u = ldMOD[,j]
test.dir = rm_onedim(X=u,u=X[,j])
dir1 = test.dir$appr.X
dir2 = -test.dir$resd.X
toydata = rbind(c(t(X)%*%dir1),c(t(X)%*%dir2))
toydataSTD = t(apply(toydata,1,FUN=function(x){pd.rate.hy(x,qrsc=F)}))
data.dir1 = PCdir%*%dir1
data.dir2 = PCdir%*%dir2
plot_pileup(Pileup=matrix(data.dir1,ncol=1),Ranges=Ranges,main="Direction 1",ylab="",
col.pileup="black",ylim=c(-0.04,0.04))
plot_pileup(Pileup=matrix(data.dir2,ncol=1),Ranges=Ranges,main="Direction 2",ylab="",
col.pileup="black",ylim=c(-0.04,0.04))
plot_pileup(Pileup=matrix(data.dir1,ncol=1),lwd=2,
plot.meanpileup=F,print.ranges = F,
ylim=c(-0.04,0.04),ylab="",xlab="",
main="Direction 1",cex.main=2,
Ranges=Ranges,col.pileup="black")
plot_pileup(Pileup=matrix(data.dir2,ncol=1),lwd=2,
plot.meanpileup=F,print.ranges = F,
ylim=c(-0.04,0.04),ylab="",xlab="",
main="Direction 2",cex.main=2,
Ranges=Ranges,col.pileup="black")
plot.hy(x=toydataSTD[1,],y=toydataSTD[2,],indlist=outliers,text=T,
xlim=yaxis.hy(toydataSTD),ylim=yaxis.hy(toydataSTD))
abline(v=0,h=0,lty=2)
X = toydataSTD
outcase = 164
plot(x=X[1,],y=X[2,],col="black",xlim=yaxis.hy(X),ylim=yaxis.hy(X))
abline(h=0,v=0,lty=2)
points(x=X[1,outcase],y=X[2,outcase],col=1,pch=19)
X = toydataSTD
outcase = 164
plot(x=X[1,],y=X[2,],col="black",xlim=yaxis.hy(X),ylim=yaxis.hy(X))
abline(h=0,v=0,lty=2)
points(x=X[1,outcase],y=X[2,outcase],col=1,pch=19)
MODout = find_MOD(X=X,minmax=F)
abline(a=0,b=MODout$MOdir[2]/MODout$MOdir[1],col="skyblue")
# abline(a=0,b=B[indexmax,2]/B[indexmax,1],col="pink")
plot_pileup(Pileup=logData0,Ranges=Ranges,case = 416,
col.pileup="black")
plot_pileup(Pileup=cbind(data.dir1,data.dir2)%*%X,Ranges=Ranges,case = outcase,
col.pileup="black")
plot_pileup(Pileup=cbind(data.dir1,data.dir2)%*%X,Ranges=Ranges,case = 119,
col.pileup="black")
X = toydataSTD
X[2,119] = -1
X[2,145] = 8
X[1,145] = -2
X[2,441] = 3
X[2,185] = 0
colmat = rep("darkgrey",n)
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2")
abline(h=0,v=0,lty=2)
## Original MOD
set.seed(2)
exMODout = get_PO(X=X,siglev=1e-05)
colmat = rep("darkgrey",n)
colmat[exMODout$outliers.sort] = 4
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2")
abline(h=0,v=0,lty=2)
# points(x=X[1,outcase],y=X[2,outcase],col=1,pch=19)
abline(a=0,b=exMODout$directions[2,outcase]/exMODout$directions[1,outcase],col=4,lwd=2)
# abline(a=0,b=-exMODout$directions[1,outcase]/exMODout$directions[2,outcase],col=2) # No more outlier direction
set.seed(2)
MODout = get_orthoMOD(X=X)
colmat = rep("darkgrey",n)
colmat[which(abs(MODout$MOscore[1,])>MODout$cutoff)] = 1
colmat[which(abs(MODout$MOscore[2,])>MODout$cutoff)] = 2
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2")
abline(h=0,v=0,lty=2)
# points(x=X[1,outcase],y=X[2,outcase],col=1,pch=19)
abline(a=0,b=MODout$orthoMOD[2,1]/MODout$orthoMOD[1,1],col=1,lwd=2)
abline(a=0,b=MODout$orthoMOD[2,2]/MODout$orthoMOD[1,2],col=2,lwd=2)
plot_pileup(Pileup=cbind(data.dir1,data.dir2)%*%exMODout$directions[,outcase],lwd=2,
plot.meanpileup=F,print.ranges = F,
ylim=c(-0.04,0.04),ylab="",xlab="",
main="Most outlying direction",cex.main=2,
Ranges=Ranges,col.pileup="black")
plot_pileup(Pileup=cbind(data.dir1,data.dir2)%*%X,case=outcase,lwd=2,
plot.meanpileup=F,print.ranges = F,
ylab="",xlab="",
main="Outlier",cex.main=2,
Ranges=Ranges,col.pileup="black")
plot_pileup(Pileup=cbind(data.dir1,data.dir2)%*%MODout$orthoMOD[,1],lwd=2,
plot.meanpileup=F,print.ranges = F,
ylim=c(-0.04,0.04),ylab="",xlab="",
main="orthoMOD 1",cex.main=2,
Ranges=Ranges,col.pileup="black")
plot_pileup(Pileup=cbind(data.dir1,data.dir2)%*%MODout$orthoMOD[,2],lwd=2,
plot.meanpileup=F,print.ranges = F,
ylim=c(-0.04,0.04),ylab="",xlab="",
main="orthoMOD 2",cex.main=2,
Ranges=Ranges,col.pileup="black")
## Figures
colmat = rep("darkgrey",n)
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2",xylab.cex=2,cex=2)
abline(h=0,v=0,lty=2)
set.seed(2)
exMODout = get_PO(X=X,siglev=1e-05)
colmat = rep("darkgrey",n)
colmat[exMODout$outliers.sort] = 4
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2",xylab.cex=2,cex=2)
abline(h=0,v=0,lty=2)
# points(x=X[1,outcase],y=X[2,outcase],col=1,pch=19)
abline(a=0,b=exMODout$directions[2,outcase]/exMODout$directions[1,outcase],col=4,lwd=2)
plot_pileup(Pileup=matrix(cbind(data.dir1,data.dir2)%*%exMODout$directions[,outcase],ncol=1),
Ranges=Ranges,main="MOD",ylab="",
col.pileup="black",ylim=c(-0.04,0.04))
plot_pileup(Pileup=cbind(data.dir1,data.dir2)%*%X,case=outcase,
Ranges=Ranges,main="Outlier",ylab="",col.pileup="black")
set.seed(2)
MODout = get_orthoMOD(X=X)
colmat = rep("darkgrey",n)
colmat[which(abs(MODout$MOscore[1,])>MODout$cutoff)] = 1
colmat[which(abs(MODout$MOscore[2,])>MODout$cutoff)] = 2
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2",xylab.cex=2,cex=2)
abline(h=0,v=0,lty=2)
# points(x=X[1,outcase],y=X[2,outcase],col=1,pch=19)
abline(a=0,b=MODout$orthoMOD[2,1]/MODout$orthoMOD[1,1],col=1,lwd=2)
abline(a=0,b=MODout$orthoMOD[2,2]/MODout$orthoMOD[1,2],col=2,lwd=2)
colmat = rep("darkgrey",n)
colmat[164] = 3
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2",xylab.cex=2,cex=2)
abline(h=0,v=0,lty=2)
points(x=X[1,outcase],y=X[2,outcase],col="black",pch=1,cex=3)
colmat = rep("darkgrey",n)
colmat[164] = 3
par(mar=c(2.5,2.5,2.5,2.5))
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2",xylab.cex=2,cex=2)
abline(h=0,v=0,lty=2)
abline(a=0,b=exMODout$directions[2,outcase]/exMODout$directions[1,outcase],col=4,lwd=2)
points(x=X[1,outcase],y=X[2,outcase],col="black",pch=1,cex=3)
colmat = rep("darkgrey",n)
colmat[exMODout$outliers.sort] = 4
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2",xylab.cex=2,cex=2)
abline(h=0,v=0,lty=2)
abline(a=0,b=exMODout$directions[2,outcase]/exMODout$directions[1,outcase],col=4,lwd=2)
colmat = rep("darkgrey",n)
colmat[exMODout$outliers.sort] = 4
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2",xylab.cex=2,cex=2)
abline(h=0,v=0,lty=2)
abline(a=0,b=exMODout$directions[2,outcase]/exMODout$directions[1,outcase],col=4,lwd=2)
abline(a=0,b=-exMODout$directions[1,outcase]/exMODout$directions[2,outcase],col=4,lwd=3,lty=3)
colmat = rep("darkgrey",n)
colmat[exMODout$outliers.sort] = 4
tmp_dir = c(exMODout$directions[2,outcase],-exMODout$directions[1,outcase])
set.seed(1)
kdeplot.hy(as.vector(t(tmp_dir)%*%X),cex=2,colmat=colmat,
indlist=exMODout$outliers.sort,indcex=2)
set.seed(1)
png(4,4,units="in",res=200,filename="toydata_orthoMOD_comp_fig2-3.png")
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(as.vector(t(tmp_dir)%*%X),cex=2,colmat=colmat,main="Residuals",
indlist=exMODout$outliers.sort,indcex=2)
dev.off()
colmat = rep("darkgrey",n)
colmat[164] = 3
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2",xylab.cex=2,cex=2)
abline(h=0,v=0,lty=2)
points(x=X[1,outcase],y=X[2,outcase],col="black",pch=1,cex=3)
# points(x=X[1,outcase],y=X[2,outcase],col=1,pch=19)
abline(a=0,b=MODout$orthoMOD[2,1]/MODout$orthoMOD[1,1],col=1,lwd=2)
colmat = rep("darkgrey",n)
colmat[which(abs(MODout$MOscore[1,])>MODout$cutoff)] = 1
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2",xylab.cex=2,cex=2)
abline(h=0,v=0,lty=2)
# points(x=X[1,outcase],y=X[2,outcase],col=1,pch=19)
abline(a=0,b=MODout$orthoMOD[2,1]/MODout$orthoMOD[1,1],col=1,lwd=2)
colmat = rep("darkgrey",n)
colmat[which(abs(MODout$MOscore[1,])>MODout$cutoff)] = 1
plot.hy(x=X[1,],y=X[2,],colmat=colmat,pch=19,xlim=yaxis.hy(X),ylim=yaxis.hy(X),
xlab="Direction 1",ylab="Direction 2",xylab.cex=2,cex=2)
abline(h=0,v=0,lty=2)
# points(x=X[1,outcase],y=X[2,outcase],col=1,pch=19)
abline(a=0,b=MODout$orthoMOD[2,1]/MODout$orthoMOD[1,1],col=1,lwd=2)
abline(a=0,b=MODout$orthoMOD[2,2]/MODout$orthoMOD[1,2],col=1,lwd=3,lty=3)
colmat = rep("darkgrey",n)
colmat[which(abs(MODout$MOscore[1,])>MODout$cutoff)] = 1
png(4,4,units="in",res=200,filename="toydata_orthoMOD_comp_fig3-3.png")
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(MODout$MOscore[2,],cex=2,colmat=colmat,main="Residuals",
indlist=which(abs(MODout$MOscore[1,])>MODout$cutoff),indcex=2)
dev.off()
colmat = rep("darkgrey",n)
colmat[exMODout$outliers.sort] = 4
tmp_dir = c(exMODout$directions[2,outcase],-exMODout$directions[1,outcase])
set.seed(1)
png(4,4,units="in",res=200,filename="toydata_orthoMOD_comp_fig2-3.png")
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(as.vector(t(tmp_dir)%*%X),cex=2,colmat=colmat,main="Residuals",cex.main=2,
indlist=exMODout$outliers.sort,indcex=2)
dev.off()
colmat = rep("darkgrey",n)
colmat[which(abs(MODout$MOscore[1,])>MODout$cutoff)] = 1
png(4,4,units="in",res=200,filename="toydata_orthoMOD_comp_fig3-3.png")
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(MODout$MOscore[2,],cex=2,colmat=colmat,main="Residuals",cex.main=2,
indlist=which(abs(MODout$MOscore[1,])>MODout$cutoff),indcex=2)
dev.off()
set.seed(1)
kdeplot.hy(MODout$MOscore[2,],cex=2,colmat=colmat,main="Residuals",cex.main=2,
indlist=which(abs(MODout$MOscore[1,])>MODout$cutoff),indcex=2)
colmat = rep("darkgrey",n)
colmat[which(abs(MODout$MOscore[1,])>MODout$cutoff)] = 1
set.seed(1)
png(4,4,units="in",res=200,filename="toydata_orthoMOD_comp_fig3-3.png")
par(mar=c(2.5,2.5,2.5,2.5))
kdeplot.hy(MODout$MOscore[2,],cex=2,colmat=colmat,main="Residuals",cex.main=2,
indlist=which(abs(MODout$MOscore[1,])>MODout$cutoff),indcex=2)
dev.off()
